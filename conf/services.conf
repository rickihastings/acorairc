/* 
 * This is an example configuration for Services.
 * 
 * All statements end in semi-colons (';').
 * Shell style, C style, and C++ style comments may be used.
 *
 */
 
/* ChanServ Module
 * 
 * These modules will be loaded as part of the chanserv core.
 * 
 * You can specify them like so inside the directory:
 *   "modulename";
 *   "modulename2";
 */
chanserv_modules
{
	// Provides DROP
	"drop";
	
	// Provides fantasy commands (!op/!deop)
	"fantasy";
	
	// Provides FLAGS
	"flags";
	
	// Provides HELP
	"help";
	
	// Provides INFO
	"info";
	
	// Provides INVITE
	"invite";
	
	// Provides LEVELS (access system)
	"levels";
	
	// Provides LIST
	"list";
	
	// Provides REGISTER
	"register";
	
	// Provides SUSPEND and UNSUSPEND
	"suspend";
	
	// Provides TOPIC management
	"topic";
	
	// Provides OP and DEOP etc
	"xcommands";
};

/* NickServ Module
 * 
 * These modules will be loaded as part of the nickserv core.
 * 
 * You can specify them like so inside the directory:
 *   "modulename";
 *   "modulename2";
 */
nickserv_modules
{
	// Provides DROP and SADROP
	"drop";
	
	// Provides GHOST
	"ghost";
	
	// Provides HELP
	"help";
	
	// Provides IDENTIFY
	"identify";
	
	// Provides INFO
	"info";
	
	// Provides LIST
	"list";
	
	// Provides PASS and SAPASS
	"password";
	
	// Provides RECOVER and RELEASE
	"recover";
	
	// Provides REGISTER
	"register";
	
	// Provides REQUEST
	"request";
	
	// Provides PASS and SAPASS
	"flags";
	
	// Provides SUSPEND and UNSUSPEND
	"suspend";
};

/* OperServ Module
 * 
 * These modules will be loaded as part of the operserv core.
 * 
 * You can specify them like so inside the directory:
 *   "modulename";
 *   "modulename2";
 */
operserv_modules
{
	// Provides AKILL
	"akill";
	
	// Provides SESSION
	"session";
	
	// Provides CHANCLEAR
	"chanclear";
	
	// Provides the Global psuedoclient
	"global";	
	
	// Provides HELP
	"help";	
	
	// Provides IGNORE
	"ignore";
	
	// Provides LOGONNEWS, requires global to be loaded
	"logonnews";
	
	// Provides MODLIST, MODLOAD and MODUNLOAD
	"module";
	
	// Provides REHASH
	"rehash";
	
	// Provides SHUTDOWN and RESTART
	"shutdown";
	
	// Provides STATS
	"stats";
	
	// Provides JUPE, MODE and KICK
	"utilities"
	
	// Provides VHOST
	"vhost";
};

/* Core Module
 * 
 * These modules will be loaded as part of the core.
 * 
 * You can specify them like so inside the directory:
 *   "modulename";
 *   "modulename2";
 */
core_modules
{

};

/* serverinfo{} block defines how we appear on the IRC network.
 */
server
{
	/* ircd
	 * 
	 * Below is a listing of ircd's known to work with the various protocol modules
	 * available.
	 * 
	 * InspIRCd    [1.2b4 or later]       inspircd12
	 * Charybdis   [3.3.0]                charybdis33 
	 *
	 * If your IRCd vendor has supplied a module file, place it into core/protocol
	 * and load it here.
	 */
	ircd "charybdis33";
	
	/* name
	 * 
	 * The server name that this program uses on the IRC network.
 	 * This is the name you'll have to use in C:/N:Lines. It must be
 	 * unique on the IRC network and contain at least one dot, but does
 	 * not have to be equal to any DNS name.
	 */
	name "services.dev.ircnode.org";
	
	/* desc
	 *
 	 * The 'server gecos' we send to the IRC network.
 	 */
	desc "IRCNode Dev Services";
	
	/* numeric
	 *
 	 * Some protocol drivers (InspIRCd 1.2)
 	 * require a server id, also known as a numeric. Please consult your
 	 * ircd's documentation when providing this value. 
 	 */
	numeric "009";
	
	/* recontime
	 *
 	 * The number of seconds before we reconnect to the next uplink.
 	 */
	recontime "10";
	
	/* lang
	 *
 	 * The language files to use, this will be the name of the folder
 	 * which should be in lang/
 	 */
	lang "en";
	
	/* network_name
	 *
 	 * The name of your network.
 	 */
	network_name "IRCNode";
};

/* uplink{} blocks define connections to IRC servers.
 * Multiple may be defined but only one will be used at a time (IRC
 * being a tree shaped network).
 */
uplink "dev.ircnode.org"
{
	/* the server name goes above. */
	
	/* host
	 *
	 * The hostname/ip to connect to.
	 */
	host "127.0.0.1";
	
	/* password
	 *
	 * The password used for linking.
	 */
	password "test";
	
	/* port
	 *
	 * The port used for linking.
	 */
	port "7000";
	
	/* vhost
	 *
	 * The source IP to connect from, used on machines with multiple interfaces.
	 */
	vhost "127.0.0.1";
};

/* ulined_servers{} block defines the ulined servers on the network
 * This should be a list of the ulined servers on your network, *including this one*
 * DO NOT put your client servers here.
 */
ulined_servers
{
	/* If you require to put more than one value here.
	 * Simply put the server on another line.
	 */
	"services.dev.ircnode.org";
};

/* nickserv {} block contains settings specific to the NickServ service.
 *
 * NickServ provides nickname registration and authentication services.
 * It provides necessary authentication features required for Services
 * to operate correctly. You should make sure these settings are properly
 * configured for your network. It is not required, but is strongly recommended.
 */
nickserv
{	
	/* nick
	 *
 	 * The nickname we want NickServ to have. 
 	 */
	nick "NickServ";
	
	/* user
	 *
 	 * The username we want NickServ to have. 
 	 */
	user "nickserv";
	
	/* host
	 *
 	 * The hostname we want NickServ to have. 
 	 */
	host "dev.ircnode.org";
	
	/* real
	 *
 	 * The realname (gecos) we want NickServ to have. 
 	 */
	real "NickName Services";
	
	/* expire
	 *
 	 * The number of days before inactive registrations are expired.
 	 * If you wish to disable this simply set it to "0".
 	 */
	expire "25";
	
	/* force_validation
	 * 
	 * Services forces newly registered users to validate their nickname
	 * via an email confirmation
	 */
	force_validation "no";

	/* secure_time
	 * 	
	 * This is a number of seconds that NickServ will wait before it force changes a SECURED
	 * user's un-identified nickname.
	 *
	 * NOTE: This setting can be changed and overridden by users with the +s flag! It cannot be
	 * set below 5. The settable limit cannot be raised higher than this limit.
	 *
	 * NOTE: This cannot be disabled, setting this to 0 will quite possibly stop people from
	 * identifing, if you want to make it an instant change if they don't identify, try using
	 * a low value such as 5.
	 */
	secure_time "50";
	
	/* default_flags
	 *
 	 * These are flags you would like to be automatically set on newly registered
 	 * nicknames, flags with parameters are ignored.
 	 */
	default_flags "H";
	
	/* allow_multiple_sessions
	 *
 	 * Whether to allow multiple logins to the same account, the default is yes and if this value
	 * isn't supplied yes is used.
 	 */
	allow_multiple_sessions "yes";
	
	/* session_limit
	 *
 	 * If the above value is set to yes this limits how many sessions you can have while logged into
	 * one nickname, if not listed the default is 2.
	 *
	 * It's not recommended to set this value to 1, to get the same effect just set the variable above
	 * to "no"
 	 */
	session_limit "2";
};

/* chanserv {} block contains settings specific to the ChanServ service.
 *
 * ChanServ provides channel registration services, which allows users to own
 * channels. It is not required, but is strongly recommended.
 */
chanserv
{
	/* nick
	 *
 	 * The nickname we want ChanServ to have. 
 	 */
	nick "ChanServ";
	
	/* user
	 *
 	 * The username we want ChanServ to have. 
 	 */
	user "chanserv";
	
	/* host
	 *
 	 * The hostname we want ChanServ to have. 
 	 */
	host "dev.ircnode.org";
	
	/* real
	 *
 	 * The realname (gecos) we want ChanServ to have. 
 	 */
	real "Channel Services";
	
	/* expire
	 *
 	 * The number of days before inactive registrations are expired.
 	 * If you wish to disable this simply set it to "0".
 	 */
	expire "25";
	
	/* fantasy_prefix
	 *
 	 * This is the prefix used to access fantasy commands, for instance !
 	 * would let you access commands from !op, if it was . the commands would
 	 * be .op
 	 */
	fantasy_prefix "!";
	
	/* default_flags
	 *
 	 * These are flags you would like to be automatically set on newly registered
 	 * channels, flags with parameters are ignored.
 	 */
	default_flags "FSGK";
};

/* operserv {} block contains settings specific to the OperServ service.
 *
 * OperServ provides essential network management tools for IRC operators
 * on the IRC network. It is not required, but is strongly recommended.
 */
operserv
{
	/* nick
	 *
 	 * The nickname we want OperServ to have. 
 	 */
	nick "OperServ";
	
	/* user
	 *
 	 * The username we want OperServ to have. 
 	 */
	user "operserv";
	
	/* host
	 *
 	 * The hostname we want OperServ to have. 
 	 */
	host "dev.ircnode.org";
	
	/* real
	 *
 	 * The realname (gecos) we want OperServ to have. 
 	 */
	real "Operator Services";
	
	/* connection_limit
	 *
	 * The amount of sessions that can be opened per IP address
	 * the default is 5
	 */
	connection_limit "5";
	
	/* override
	 *
 	 * Gives services roots the ability to turn an override mode on
 	 * giving them founder access to all channels, allowing them to change
 	 * settings etc in emergency situations.
 	 */
	override "no";
};

/* global {} block contains settings specific to the Global notice module.
 *
 * The Global notice modules provide the ability to mass-notify a network.
 */
global
{
	/* nick
	 *
 	 * The nickname we want Global to have. 
 	 */
	nick "Global";
	
	/* user
	 *
 	 * The username we want Global to have. 
 	 */
	user "global";
	
	/* host
	 *
 	 * The hostname we want Global to have. 
 	 */
	host "dev.ircnode.org";
	
	/* real
	 *
 	 * The realname (gecos) we want Global to have. 
 	 */
	real "Network Announcements";
	
	/* nick_on_global
	 *
 	 * Show the nickname of the oper when sending a message with the OS global command
 	 * if this is not specified the default value will be no.
 	 */
	nick_on_global "yes";
};

/* settings {} block defines general settings. 
 */
settings
{
	/* php_dir
	 *
	 * NOTE: This is ONLY needed when running windows
	 * The default value is C:\php\php.exe when not defined.
	 *
	 * This should be the location to your php binary, including the php.exe part
	 */
	php_dir "C:\xampp\php\php.exe";
	
	/* loglevel
	 *
 	 * This can be either "off", "server", "basic", "all". Below is a list of
 	 * what each setting does
 	 *  
 	 *    off    - Turns logging off completely (this is NOT recommended)
 	 *    server - Turns logging to server to server data only (this is only
 	 *             recommended when writing modules, debugging)
 	 *    basic  - Basic is the default value, which will show most event
	 * database  - Should only be used to debug database issues, this will show all queries
	 *             to the database server.
 	 *             function calls, so we can "reproduce" crashes, on the event of one.
 	 *    all    - This is server and basic combined, this is only needed in the rare
 	 *             cases where we need to dig very deep to reproduce a segfault.
 	 * 
 	 * With this set to "off" there will be no way of knowing what caused
 	 * caused a crash (if one happened) and no way for us to fix it.
	 */
	loglevel "basic";
	
	/* logchan
	 *
 	 * When defined, services will output log messages to this channel.
 	 * IMPORTANT: This can be a security risk so make certain this channel
 	 * is sufficiently protected from normal access.
 	 */
	logchan "#services";
	
	/* logconnections
	 *
	 * If this is enabled, services will log all incoming connections,
	 * disconnects and nick changes. You may need to use this incase
	 * your local authorities require information.
	 */
	logconnections "yes";
	
	/* mode_on_id
	 *
	 * When enabled, services will set the channel modes a user has access to upon
	 * identifying, assuming they are not already set.
	 */
	mode_on_id "yes";
	
	/* shutdown_message
	 *
	 * A shutdown message to display to all users when services shutdown, this
	 * is optional and can be emptied or commented out if a message isn't wanted.
 	 */
	shutdown_message "Services are undergoing some maintenance, they will be back online shortly."
	
	/* silent
	 *
 	 * If you want to prevent services from sending
  	 * WALLOPS/GLOBOPS about things set this to "yes".
 	 */
	silent "yes";

	/* flood_msgs
	 *
	 * Set to how many messages before a flood is triggered.
	 * If services receives 'flood_msgs' within 'flood_time' the user will
	 * trigger the flood protection.
	 * Setting this to zero disables flood protection.
	 */
	flood_msgs "7";
	
	/* flood_time
	 *
	 * Set to how long before the counter resets.
	 * If services receives 'flood_msgs' within 'flood_time' the user will
	 * trigger the flood protection.
	 */
	flood_time "10";
	
	/* hostmap
 	 *
	 * If you want to use special chars for vhosts you can customize the list below
	 * note that these will only work if your ircd allows them. So a good idea if using
	 * inspircd would be to have the value of <hostname charmap=""> the same as the value
	 * below. Note that configuring these are not allowed in some ircds, so the default
	 * value would be suitable for those circumstances. This is case sensitive.
	 */
	hostmap "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.-0123456789";
	
	/* email_from
	 *
	 * This is only used if nickserv::force_validation is enabled
	 *
	 * The email address the confirmation email will be sent from, if none is given services
	 * will use the value from service_user.
	 */
	email_from "noreply@theshaun.com";
};

/* opers {} block defines opers. 
 *
 * For these to work the nickname needs to be opered up with the ircd
 * and be identified to a registered nickname.
 *
 * values are:
 *
 * root           Allows use of restart/die/rehash/modload/modunload/override
 * global_op      Allows use of akill/session/chanclear/global/logonnews/ignore
 * local_op       Allows use of jupe/stats/mode/kick/vhost
 * chanserv_op    Allows use of all chanserv commands, including dropping channels you don't own
 * nickserv_op    Allows use of nickserv drop/sapass/saflags
 *
 * Without these blocks an IRCOp wont have any more control over services that a normal user has.
 * Apart from not being affected by chanclear/akill/session limits/flood triggers
 */
opers
{
	"Ricki:root:global_op:local_op:chanserv_op:nickserv_op";
};

/* database {} block defines database settings.
 */
database
{
	/* driver
	 *
	 * The driver services will used, this has to be the filename
	 * in core/drivers without the .php extension
	 *
	 * This should also be the name of the class in the driver file.
	 */
	driver "mysql";
	
	/* server
	 *
	 * The mysql server services will attempt to connect to.
	 */
	server "localhost";
	
	/* user
	 *
	 * The mysql user services will use when connecting.
	 */
	user "root";
	
	/* pass
	 *
	 * The mysql password that will be used
	 */
	pass "";
	
	/* name
	 *
	 * The name of the mysql database which will be used.
	 */
	name "acora_services";
	
	/* prefix
	 *
	 * The prefix of the database tables, default is "system_"
	 */
	prefix "system_";
	
	/* optimize
	 *
	 * Services will automatically optimize all tables every 24 hours, keeping
	 * your databases clean with little overhead, the default value for this is yes
	 *
	 * This is reccomended for servers/networks with high traffic and usage
	 * as a regular database optimization will be very affective.
	 */
	optimize "yes";
};
